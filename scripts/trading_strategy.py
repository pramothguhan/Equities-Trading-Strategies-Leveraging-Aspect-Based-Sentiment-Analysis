# -*- coding: utf-8 -*-
"""Trading_Strategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18c3Te1-_73k-TAO8_mpPHUw3S9QZDpjy
"""

!pip install backtrader

import matplotlib.pyplot as plt
import backtrader as bt
import yfinance as yf
import pandas as pd
from datetime import datetime

# Step 1: Define the Strategy
class PriceVolumeSMA(bt.Strategy):
    params = (
        ("n_days", 100),  # Lookback period for SMA
        ("target_profit", 0.20),  # Target profit
        ("stop_loss", 0.1),  # Stop loss
    )

    def __init__(self):
        self.sma = bt.indicators.SimpleMovingAverage(self.data.close, period=self.params.n_days)
        self.volume_sma = bt.indicators.SimpleMovingAverage(self.data.volume, period=self.params.n_days)
        self.entry_price = None
        self.portfolio_values = []  # Track portfolio values

    def next(self):
        # Track the portfolio value at each step
        self.portfolio_values.append(self.broker.getvalue())

        if not self.position:
            if self.data.close[0] > self.sma[0] and self.data.volume[0] > self.volume_sma[0]:
                self.buy()
                self.entry_price = self.data.close[0]
            elif self.data.close[0] < self.sma[0] and self.data.volume[0] < self.volume_sma[0]:
                self.sell()
                self.entry_price = self.data.close[0]
        else:
            if self.position.size > 0:  # Long
                if (self.data.close[0] >= self.entry_price * (1 + self.params.target_profit)) or \
                   (self.data.close[0] <= self.entry_price * (1 - self.params.stop_loss)):
                    self.close()
            elif self.position.size < 0:  # Short
                if (self.data.close[0] <= self.entry_price * (1 - self.params.target_profit)) or \
                   (self.data.close[0] >= self.entry_price * (1 + self.params.stop_loss)):
                    self.close()

# Step 2: Fetch data using yfinance
def fetch_data(ticker, start, end):
    data = yf.download(ticker, start=start, end=end)
    data.columns = data.columns.get_level_values(0)
    data.rename(
        columns={
            "Open": "open",
            "High": "high",
            "Low": "low",
            "Close": "close",
            "Volume": "volume",
        },
        inplace=True,
    )
    data["openinterest"] = 0
    data.index = pd.to_datetime(data.index)
    return data

# Step 3: Custom PandasData Feed
class CustomPandasData(bt.feeds.PandasData):
    lines = ('openinterest',)
    params = (('openinterest', -1),)

# Step 4: Backtest Setup
if __name__ == "__main__":
    cerebro = bt.Cerebro()

    # Add strategy
    cerebro.addstrategy(PriceVolumeSMA, n_days=100, target_profit=0.20, stop_loss=0.10)

    # Add data
    start_date = datetime.now() - pd.DateOffset(months=24)
    end_date = datetime.now()
    tickers = ["AMZN", "TSLA", "GME", 'PLTR']
    for ticker in tickers:
        data = fetch_data(ticker, start_date, end_date)
        bt_data = CustomPandasData(dataname=data)
        cerebro.adddata(bt_data, name=ticker)

    # Set initial cash
    cerebro.broker.setcash(1000)

    # Set commission
    cerebro.broker.setcommission(commission=0)

    # Run the strategy
    print("Starting Portfolio Value: %.2f" % cerebro.broker.getvalue())
    results = cerebro.run()
    print("Final Portfolio Value: %.2f" % cerebro.broker.getvalue())

    # Extract P&L values from the strategy
    strategy = results[0]
    pnl_values = strategy.portfolio_values

    # Plot P&L chart
    plt.figure(figsize=(12, 6))
    plt.plot(pnl_values, label='Portfolio Value')
    plt.title('P&L Chart')
    plt.xlabel('Time (steps)')
    plt.ylabel('Portfolio Value')
    plt.legend()
    plt.grid()
    plt.show()

    # Ensure backtrader plots appear in Colab
    cerebro.plot(iplot=False, volume=False)

    # Performance metrics
    start_value = 1000
    end_value = cerebro.broker.getvalue()
    total_return = (end_value - start_value) / start_value
    print(f"Total Return: {total_return * 100:.2f}%")